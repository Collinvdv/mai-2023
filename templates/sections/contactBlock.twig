{# ========================================================================== #}
{# :: Variables #}
{# ========================================================================== #}
{% set title = data.commonTitle ?? "" %}
{% set image = data.commonImage.one().getUrl({ width: "1200px", quality: 80 }) ?? "" %}

{# ========================================================================== #}
{# :: Component #}
{# ========================================================================== #}
<div class="container mx-auto px-8">
    <div class="grid lg:grid-cols-12 gap-12">
        {# Content #}
        <div class="lg:col-span-5">
            <h1 class="mb-8 lg:mb-24">
                {{ title }}
            </h1>

            {% if image %}
                <img class="rounded-x-lg w-full" src="{{image}}">
                </img>
            {% endif %}
        </div>

        {# Form #}
        <div class="lg:col-span-7">
            <div class="rounded-x-lg p-8 md:p-16" style="box-shadow: 0px 0px 30px #00000014;">
                <div class="grid grid-cols-1 gap-y-6 md:gap-y-10">
                    <form @submit.prevent="submitData" x-data="getContactData()">
                        <template x-if="!formData.isSubmitted">
                            <div class="grid grid-cols-1 gap-y-6 md:gap-y-8 md:grid-cols-2 md:gap-x-10">
                                <div class="col-span-2 md:col-span-1">
                                    {% include "/components/input.twig" with {
                                        label: "Your firstname",
                                        id: "Voornaam",
                                        alpineModel: "formData.fields[0]"
                                    } %}
                                </div>

                                <div class="col-span-2 md:col-span-1">
                                    {% include "/components/input.twig" with {
                                        label: "Your lastname",
                                        id: "Achternaam",
                                        alpineModel: "formData.fields[1]"
                                    } %}
                                </div>

                                <div class="col-span-2 md:col-span-2">
                                    {% include "/components/input.twig" with {
                                        label: "Your email address",
                                        id: "mailadres",
                                        type: "email",
                                        alpineModel: "formData.fields[2]"
                                    } %}
                                </div>

                                <div class="col-span-2 md:col-span-2">
                                    {% include "/components/input.twig" with {
                                        label: "Your message",
                                        id: "message",
                                        type: "text",
                                        alpineModel: "formData.fields[3]"
                                    } %}
                                </div>


                                <div class="col-span-2 md:col-span-1 hidden">
                                    {% include "/components/input.twig" with {
                                        label: "city",
                                        id: "city",
                                    } %}
                                </div>

                                <div class="col-span-2">
                                    {% include "/components/checkboxes.twig" with {
                                        checkboxes: [
                                            {
                                                id: "privacy",
                                                label: "Privacy_condition" | t,
                                                alpineModel: "formData.conditions[0]"
                                            }, {
                                                id: "mail",
                                                label: "Share_condition" | t,
                                                alpineModel: "formData.conditions[1]"
                                            }
                                        ]
                                    } %}
                                </div>

                                <div>
                                    {% include "/components/button.twig" with {
                                        text: 'Keep me posted'|t,
                                        type: "submit"
                                    } %}
                                </div>
                            </div>
                        </template>

                        <template x-if="formData.isSubmitted">
                            <h4>
                                Forms submitted
                            </h4>
                        </template>
                    </form>
                </div>
            </div>
        </div>
    </div>
</div>

{# Script #}
<script>
        function getContactData() {
            return {
                formData: {
                    fields : [
                        {
                            id: "FirstName",
                            value: "",
                            isError: false,
                            isRequired: true,
                            type: "text"
                        },
                        {
                            id: "LastName",
                            value: "",
                            isError: false,
                            isRequired: true,
                            type: "text"
                        },
                        {
                            id: "Emails",
                            value: "",
                            isError: false,
                            isRequired: true,
                            type: "email"
                        },
                        {
                            id: "Message",
                            value: "",
                            isError: false,
                            isRequired: true,
                            type: "text"
                        }
                    ],
                    conditions: [
                        {
                            isActive: false,
                            isError: false
                        },
                        {
                            isActive: false,
                            isError: false
                        }
                    ],
                    isSubmitted: false,
                },
                submitData() {
                    // Check if empty when required
                    var hasErrors = false;

                    // check fields
                    for (var index = 0; index < this.formData.fields.length; index ++) {
                        var field = this.formData.fields[index];

                        if (field.isRequired && field.value == "") {
                            field.isError = true;
                            hasErrors = true;
                        } else {
                            field.isError = false;
                        }
                    }

                    // check conditions
                    for (var index = 0; index < this.formData.conditions.length; index ++) {
                        var condition = this.formData.conditions[index];

                        if (condition.isActive == false) {
                            condition.isError = true;
                            hasErrors = true;
                        } else {
                            condition.isError = false;
                        }
                    }

                    // it has errors so stop form
                    if (hasErrors) {
                        return;
                    }

                    // Great now make formData to actual candidate form
                    var candidateData = {};

                    for (var index = 0; index < this.formData.fields.length; index ++) {
                        var field = this.formData.fields[index];

                        if (field.value != "") {
                            switch(field.type) {
                                case "text":
                                    candidateData[field.id] = field.value
                                    break;
                                case "email":
                                    candidateData[field.id] = [{ "Value" : field.value}]
                                    break;
                            }
                        }
                    }

                    // honeypot for crawlers, screw you bots
                    let city = document.querySelector("#city").value;

                    // POST candidate to api
                    if (city == "") {
                        fetch("/api/talentlyft/form.php", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "Authorization": "Bearer ta6D8E3pQ418A947S3fYofwdPJJ-tztM6cevORyKs3Y"
                            },
                            body: JSON.stringify(candidateData),
                        })
                        .then(() => {
                            this.formData.isSubmitted = true;
                        });
                    }
                },
                uploadResume(e) {
                    var file = e.target.files[0];

                    getFile(file).then((content) => {
                        this.formData.resume = {
                            "FileName": content.name,
                            "Content": content.data
                        };
                    });
                },
                uploadAttachments(e) {
                    // empty attachment
                    this.formData.attachments = [];

                    // add attachment
                    for(var index = 0;index < e.target.files.length; index ++) {
                        var file = e.target.files[index];

                        getFile(file).then((content) => {
                            this.formData.attachments.push({
                                "FileName": content.name,
                                "Content": content.data
                            });
                        });
                    }
                }
            }
        }
    </script>