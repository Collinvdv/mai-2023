{# ========================================================================== #}
{# :: Variables #}
{# ========================================================================== #}
{% set title = data.commonTitle ?? "" %}
{% set careerId = data.commonCareerTalentlyftId ?? "" %}


{# ========================================================================== #}
{# :: Component #}
{# ========================================================================== #}
{% nocache with { title: title, careerId: careerId } %}
    <div class="container mx-auto">
        <div class="flex flex-col items-center">
            <h3 class="mb-8 text-3xl md:mb-12 md:text-5xl">
                {{ title }}
            </h3>

            <form @submit.prevent="submitData" x-data="getCareerData()" class="career-form" data-career-id="{{careerId}}">
                <template x-if="!formData.isSubmitted">
                    <div class="grid grid-cols-1 gap-y-6 md:gap-y-8 md:grid-cols-2 md:gap-x-10">
                        <div class="col-span-2 md:col-span-1">
                            {% include "/components/input.twig" with {
                                label: "Voornaam",
                                id: "Voornaam",
                                alpineModel: "formData.fields[0]"
                            } %}
                        </div>

                        <div class="col-span-2 md:col-span-1">
                            {% include "/components/input.twig" with {
                                label: "Achternaam",
                                id: "Achternaam",
                                alpineModel: "formData.fields[1]"
                            } %}
                        </div>

                        <div class="col-span-2 md:col-span-1">
                            {% include "/components/input.twig" with {
                                label: "E-mailadres",
                                id: "mailadres",
                                type: "email",
                                alpineModel: "formData.fields[2]"
                            } %}
                        </div>

                        <div class="col-span-2 md:col-span-1">
                            {% include "/components/input.twig" with {
                                label: "Taal",
                                id: "taak",
                            } %}
                        </div>

                        <div class="col-span-2 md:col-span-1 hidden">
                            {% include "/components/input.twig" with {
                                label: "city",
                                id: "city",
                            } %}
                        </div>

                        <div class="col-span-2 md:col-span-1">
                            {% include "/components/file-input.twig" with {
                                changeMethod: "uploadResume"
                            } %}
                        </div>

                        <div class="col-span-2 md:col-span-1">
                            {% include "/components/file-input.twig" with {
                                changeMethod: "uploadAttachments",
                                canUploadMultipleFiles: true
                            } %}
                        </div>

                        <div class="col-span-2">
                            {% include "/components/checkboxes.twig" with {
                                checkboxes: [
                                    {
                                        id: "career-privacy",
                                        label: "Privacy_condition" | t,
                                        alpineModel: "formData.conditions[0]"
                                    }, {
                                        id: "career-mail",
                                        label: "Share_condition" | t,
                                        alpineModel: "formData.conditions[1]"
                                    }
                                ]
                            } %}
                        </div>

                        <div>
                            {% include "/components/button.twig" with {
                                text: 'Keep me posted'|t,
                                type: "submit"
                            } %}
                        </div>
                    </div>
                </template>

                <template x-if="formData.isSubmitted">
                    <h4>
                        Forms submitted
                    </h4>
                </template>
            </form>
        </div>
    </div>

    <script>
        function getCareerData() {
            return {
                formData: {
                    fields : [
                        {
                            id: "FirstName",
                            value: "",
                            isError: false,
                            isRequired: true,
                            type: "text"
                        },
                        {
                            id: "LastName",
                            value: "",
                            isError: false,
                            isRequired: true,
                            type: "text"
                        },
                        {
                            id: "Emails",
                            value: "",
                            isError: false,
                            isRequired: false,
                            type: "email"
                        }
                    ],
                    conditions: [
                        {
                            isActive: false,
                            isError: false
                        },
                        {
                            isActive: false,
                            isError: false
                        }
                    ],
                    resume: null,
                    attachments: [],
                    isSubmitted: false,
                },
                submitData() {
                    // Check if empty when required
                    var hasErrors = false;

                    // check fields
                    for (var index = 0; index < this.formData.fields.length; index ++) {
                        var field = this.formData.fields[index];

                        if (field.isRequired && field.value == "") {
                            field.isError = true;
                            hasErrors = true;
                        } else {
                            field.isError = false;
                        }
                    }

                    // check conditions
                    for (var index = 0; index < this.formData.conditions.length; index ++) {
                        var condition = this.formData.conditions[index];

                        if (condition.isActive == false) {
                            condition.isError = true;
                            hasErrors = true;
                        } else {
                            condition.isError = false;
                        }
                    }

                    // it has errors so stop form
                    if (hasErrors) {
                        return;
                    }

                    // Great now make formData to actual candidate form
                    console.log(document.querySelector(".career-form").dataset);
                    var candidateData = {
                        jobId: document.querySelector(".career-form").dataset["careerId"]
                    };

                    for (var index = 0; index < this.formData.fields.length; index ++) {
                        var field = this.formData.fields[index];

                        if (field.value != "") {
                            switch(field.type) {
                                case "text":
                                    candidateData[field.id] = field.value
                                    break;
                                case "email":
                                    candidateData[field.id] = [{ "Value" : field.value}]
                                    break;
                            }
                        }
                    }

                    // add resume
                    if (this.formData.resume)
                        candidateData["Resume"] = this.formData.resume;

                    if (this.formData.attachments)
                        candidateData["Attachments"] = this.formData.attachments;

                    // honeypot for crawlers, screw you bots
                    let city = document.querySelector("#city").value;

                    // POST candidate to api
                    if (city == "") {
                        fetch("/api/talentlyft/candidates.php", {
                            method: "POST",
                            headers: {
                                "Content-Type": "application/json",
                                "Authorization": "Bearer ta6D8E3pQ418A947S3fYofwdPJJ-tztM6cevORyKs3Y"
                            },
                            body: JSON.stringify(candidateData),
                        })
                        .then(() => {
                            this.formData.isSubmitted = true;
                        });
                    }
                },
                uploadResume(e) {
                    var file = e.target.files[0];

                    getFile(file).then((content) => {
                        this.formData.resume = {
                            "FileName": content.name,
                            "Content": content.data
                        };
                    });
                },
                uploadAttachments(e) {
                    // empty attachment
                    this.formData.attachments = [];

                    // add attachment
                    for(var index = 0;index < e.target.files.length; index ++) {
                        var file = e.target.files[index];

                        getFile(file).then((content) => {
                            this.formData.attachments.push({
                                "FileName": content.name,
                                "Content": content.data
                            });
                        });
                    }
                }
            }
        }
    </script>
{% endnocache %}